#!/usr/bin/env python
import sys, os

try:
    from waflib.extras import symwaf2ic
    from waflib.extras.gtest import summary
    recurse = lambda ctx: None
except ImportError:
    from gtest import summary
    from symwaf2ic import recurse_depends
    recurse = lambda ctx: recurse_depends(depends, ctx)

def load_waf_modules(ctx):
    modules = ['compiler_cxx', 'pytest', 'python', 'pypp', 'boost']
    for mo in modules:
        ctx.load(mo)

def depends(dep):
    dep('pyhmf')
    dep('halbe', 'pyhalbe')
    dep('logger', 'pylogging')
    dep('redman')
    dep('redman', 'pyredman')

def options(opt):
    recurse(opt)
    load_waf_modules(opt)

def configure(cfg):
    recurse(cfg)
    load_waf_modules(cfg)

    cfg.check_boost(lib='python serialization',
            uselib_store='BOOST4PYMAROCCO')

def build(bld):
    recurse(bld)

    flags = { "cxxflags"  : ['-Wno-literal-suffix', # squelch warnings from openMPI's mpi.h
                         ],
            }

    bld(target='pymarocco',
        features='cxx cxxshlib post_task',
        source=bld.path.ant_glob('*.cpp'),
        use=[
            'BOOST4PYMAROCCO',
            'marocco_parameters',
            'euter_inc',
            'redman',
            'halbe_coordinate',
            'sthal',
        ],
        post_task='_pymarocco',
        install_path='lib',
        **flags)

    bld(target='_pymarocco',
        features        = 'cxx cxxshlib pypp pyembed pyext post_task',
        script          = 'generate.py',
        gen_defines     = 'PYPLUSPLUS __STRICT_ANSI__',
        defines         = 'PYBINDINGS',
        headers         = 'bindings.h',
        use             = ['pymarocco', 'VERSION'],
        post_task       = [
            'pyhalbe',
            'pyhmf',
            'pylogging',
            'pymarocco_coordinates',
            'pymarocco_results',
            'pyredman',
            'pysthal',
        ],
        install_path    = 'lib',
        **flags)

    bld.install_files('lib',
            bld.path.ant_glob('pymarocco/**/*.py'),
            relative_trick=True)

    bld(target='marocco_runtime_inc',
        export_includes='..')

    runtime_defines = []
    if not bld.options.with_ester:
        runtime_defines.append('__ESTER_BREACHED__')

    bld(target='marocco_runtime',
        features='cxx cxxshlib',
        source=bld.path.ant_glob('runtime/*.cpp'),
        defines=runtime_defines,
        use=[
            'BOOST4PYMAROCCO',
            'euter_inc',
            'marocco_results',
            'marocco_runtime_inc',
            'sthal',
            'marocco_algorithms_inc',
        ],
        post_task='pymarocco_runtime',
        install_path='lib',
        **flags)

    bld(target='pymarocco_runtime',
        features='cxx cxxshlib pypp pyembed pyext post_task',
        script='generate_runtime.py',
        gen_defines='PYPLUSPLUS __STRICT_ANSI__',
        defines=['PYBINDINGS'] + runtime_defines,
        headers=bld.path.ant_glob('runtime/*.h'),
        use=[
            'BOOST4PYMAROCCO',
            'euter_inc',
            'marocco_runtime',
            'marocco_algorithms',
        ],
        post_task=['pysthal', 'pymarocco_results'],
        install_path='lib',
        **flags)

    bld(target='pymarocco_coordinates',
        features='cxx cxxshlib pypp pyembed pyext post_task',
        script='generate_coordinates.py',
        gen_defines='PYPLUSPLUS __STRICT_ANSI__',
        defines='PYBINDINGS',
        headers='marocco_coordinates.h',
        use=[
            'marocco_coordinates',
            'halbe_coordinate',
        ],
        post_task='pyhalbe',
        install_path='lib',
        **flags)

    bld(target='pymarocco_results',
        features='cxx cxxshlib pypp pyembed pyext post_task',
        script='generate_results.py',
        gen_defines='PYPLUSPLUS __STRICT_ANSI__',
        defines='PYBINDINGS',
        headers='marocco_results.h',
        use=[
            'marocco_results',
        ],
        post_task=['pyhalbe', 'pymarocco_coordinates'],
        install_path='lib',
        **flags)

    # Write version information
    old_path = os.getcwd()
    os.chdir(str(bld.path.abspath()))
    version = os.popen('git rev-parse --short HEAD',).read().strip()
    os.chdir(old_path)

    bld(
        target = 'VERSION',
        rule = 'echo "' + version + '" > ${TGT[0].abspath()}',
        install_path = 'lib/pymarocco')
