from os.path import realpath, join, expanduser


def depends(dep):
    dep('halco')
    dep('marocco')


def options(opt):
    opt.load('c_emscripten')
    opt.add_option('--emscripted-boost-prefix', action='store', default='',
                   help='Path to emscripted boost installation')


def configure(cfg):
    env = cfg.env
    cfg.setenv('emscripten')
    cfg.load('c_emscripten')
    cfg.env.EMSCRIPTED_BOOST_PREFIX = cfg.options.emscripted_boost_prefix
    if not cfg.env.EMSCRIPTED_BOOST_PREFIX:
        cfg.fatal('Please provide --emscripted-boost-prefix=/path/to/boost/install')
    cfg.setenv('', env=env)


def build(bld):
    # provide emscripted boost libraries
    bld.all_envs['emscripten'].LIBPATH_BOOST4MAROCCO = [str(realpath(join(bld.all_envs['emscripten'].EMSCRIPTED_BOOST_PREFIX, 'lib')))]
    bld.all_envs['emscripten'].INCLUDES_BOOST4MAROCCO = [str(realpath(join(bld.all_envs['emscripten'].EMSCRIPTED_BOOST_PREFIX, 'include')))]
    bld.all_envs['emscripten'].LIB_BOOST4MAROCCO = 'boost_iostreams boost_filesystem boost_serialization boost_system'.split()

    # we cannot reuse the targets, so we recompile the files directly
    marocco_files = bld.get_tgen_by_name('marocco_coordinates').source + bld.get_tgen_by_name('marocco_results').source
    external_files = bld.get_tgen_by_name('halco_hicann_v2').source + bld.get_tgen_by_name('halco_common').source + bld.get_tgen_by_name('halbe_container_emscripten').source

    bld.program(
        features='cxx',
        target='Marocco',
        source=[
            'embind.cpp',
            '../resource/HICANNManager.cpp',
        ] + marocco_files + external_files,
        use = ['marocco_inc', 'BOOST4MAROCCO'],
        env = bld.all_envs['emscripten'],
        # lots of custom em++ flags... :( -> TODO: clean up duplication
        cxxflags = '-O2 -std=c++14 -Werror -s ALLOW_MEMORY_GROWTH=1 -s ASSERTIONS=2 -s DEMANGLE_SUPPORT=1 -s ERROR_ON_UNDEFINED_SYMBOLS=1 -s VERBOSE=1 -s DISABLE_EXCEPTION_CATCHING=0 -s STACK_OVERFLOW_CHECK=1 -s EXCEPTION_DEBUG=1 -g4',
        linkflags = '-O2 --bind -Werror -s USE_ZLIB=1 -s ALLOW_MEMORY_GROWTH=1 -s ASSERTIONS=2 -s DEMANGLE_SUPPORT=1 -s ERROR_ON_UNDEFINED_SYMBOLS=1 -s VERBOSE=1 -s DISABLE_EXCEPTION_CATCHING=0 -s STACK_OVERFLOW_CHECK=1 -s EXCEPTION_DEBUG=1 -g4',
    )
